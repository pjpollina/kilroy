#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path(File.dirname(__FILE__)).chomp('/bin')

require 'dotenv/load'
require 'discordrb'
require 'lib/kilroy'
require 'lib/utils/backup'
require 'lib/clients/mysql'
require 'lib/clients/tweeter'
require 'lib/channels/status'
require 'lib/channels/cardio'

kilroy = Kilroy.new(
  mysql:   MySQL.new,
  discord: Discordrb::Bot.new(token: ENV['discord_bot_token'], client_id:  ENV['discord_bot_id']),
  tweeter: Tweeter.new
)

runcache = []
runspaused = false

kilroy.message(in: '#cardio') do |event|
  # Check if input is valid, and react with the "no entry sign" if it isn't
  unless(Cardio.valid?(event.content))
    event.message.react("\u{1F6AB}")
    next
  end
  # Adds input to runcache if insertion is currently paused
  if(runspaused)
    puts "#{event.content} added to cache"
    runcache << event.content
    next
  end
  # Inserts run into the database if neither of the above are envoked
  response, error = Cardio.insert(event.content, kilroy.mysql)
  event.message.react("\u{1F6AB}") if error
  puts "#{"Error in #cardio: " if error}#{response}"
end

kilroy.message(in: '#status') do |event|
  response, log = Status.response(event.content, kilroy.mysql)
  event.respond(response) unless response.empty?
  puts ((log.nil?) ? "Command error: #{response}" : log)
end

kilroy.message(in: '#general') do |event|
  case event.content
  when 'tweet day'
    event.respond(kilroy.tweeter.day_totals(kilroy.mysql))
  when 'tweet week'
    event.respond(kilroy.tweeter.week_totals(kilroy.mysql))
  when 'tweet month'
    event.respond(kilroy.tweeter.month_totals(kilroy.mysql))
  when 'sync s3'
    Backup.s3_sync
    puts 's3 synced'
  end
end

kilroy.message(in: '#functions') do |event|
  reply = ""
  case event.content
  when 'cache'
    runspaused = true
    event.message.react("\u{1F44D}")
  when 'uncache'
    runspaused = false
    event.message.react("\u{1F44D}")
    runcache.each do |run|
      response, error = Cardio.insert(run, kilroy.mysql)
      reply << "#{response}\n" if error
      puts "#{"Error in #cardio: " if error}#{response}"
    end
    runcache = []
  when 'push'
    event.message.react("\u{1F44D}")
    runcache.each do |run|
      response, error = Cardio.insert(run, kilroy.mysql)
      reply << "#{response}\n" if error
      puts "#{"Error in #cardio: " if error}#{response}"
    end
    runcache = []
  when 'show'
    reply = "```Cached runs:\n" + runcache.join("\n") + "```"
  when 'undo'
    reply = "Removed #{runcache.pop} from cache"
  when 'clear'
    runcache = []
    event.message.react("\u{1F44D}")
  end
  event.respond(reply) unless reply.empty?
end

kilroy.run
