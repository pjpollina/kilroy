#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path(File.dirname(__FILE__)).chomp('/bin')

require 'dotenv/load'
require 'discordrb'
require 'lib/mysql'
require 'lib/backup'
require 'lib/status'
require 'lib/cardio'
require 'lib/tweeter'

REG_RUN  = /\A([1-9]|[1-9][0-9])\.(0|5), ([1-9]|[1-5][0-9]|60)m\z/
REG_HILL = /#{REG_RUN.source.chomp('\z')}, ([1-9]|[1-9][0-9])\.(0|5)%\z/

INSERT_RUN  = 'INSERT INTO cardio(cd_date, cd_mph, cd_minutes) VALUES(CURDATE(), ?, ?)'
INSERT_HILL = 'INSERT INTO cardio(cd_date, cd_mph, cd_minutes, cd_incline) VALUES(CURDATE(), ?, ?, ?)'

mysql = MySQL.new('kilroy', ENV['discord_bot_token'], 'fitness', ENV['sql_host'] || 'localhost')

tweeter = Tweeter.new

kilroy = Discordrb::Bot.new(
  token:      ENV['discord_bot_token'],
  client_id:  ENV['discord_bot_id']
)

kilroy.message(in: '#cardio') do |event|
  case event.content
  when REG_RUN
    mph, minutes = event.content.split(', ')
    mysql.execute(INSERT_RUN, [mph.to_f, minutes.chomp(?m).to_i])
    Backup.write(mph, minutes)
    puts "Run:\t#{event.content}"
  when REG_HILL
    mph, minutes, incline = event.content.split(', ')
    mysql.execute(INSERT_HILL, [mph.to_f, minutes.chomp(?m).to_i, incline.chomp('%').to_f])
    Backup.write(mph, minutes, incline)
    puts "Hill:\t#{event.content}"
  else
    event.respond("Unrecognized cardio format")
  end
end

kilroy.message(in: '#status') do |event|
  Status.command_response(event, mysql)
end

kilroy.message(in: '#general') do |event|
  if(event.content.eql?('tweet'))
    event.respond(tweeter.day_totals(mysql))
  end
end

kilroy.run
